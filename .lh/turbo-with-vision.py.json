{
    "sourceFile": "turbo-with-vision.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710790142278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710790142278,
            "name": "Commit-0",
            "content": "import base64\nimport json\nimport cv2\nimport requests\nimport os\nimport csv\nimport time\nimport re\n\n# OpenAI API Key\napi_key = os.environ.get('OPENAI_API_KEY')\n\n# Function to captsure image from camera and encode it\ndef capture_and_encode_image():\n    cap = cv2.VideoCapture(1)\n    if not cap.isOpened():\n        raise Exception(\"Failed to open camera\")\n    \n    # print(\"'s': save the image and proceed, 'q': quit, 'n': retake the image.\")\n    # while True:\n    #     ret, frame = cap.read()\n    #     cv2.imshow(\"Preview\", frame)\n    #     key = cv2.waitKey(1) & 0xFF\n\n    #     if key == ord('q'):\n    #         print(\"Quitting\")\n    #         break\n    #     elif key == ord('n'):\n    #         print(\"Retaking\")\n    #         continue\n    #     elif key == ord('s'):\n    #         print(\"Saving and Processing\")\n    #         cap.release()\n    #         _, buffer = cv2.imencode('.jpg', frame)\n    #         base64_image = base64.b64encode(buffer).decode('utf-8')\n    #         cv2.destroyAllWindows()\n    #         return base64_image\n    print(\"Taking photo in 10 seconds...\")\n    # Preview the image during the 10-second delay\n    for i in range(5, 0, -1):\n        print(f\"Previewing image in {i} seconds...\")\n        ret, frame = cap.read()\n        if not ret:\n            raise Exception(\"Failed to capture image\")\n        cv2.imshow(\"Preview\", frame)\n        cv2.waitKey(1000)  # Pause for 1 second\n        cv2.destroyAllWindows()\n\n    print(\"Capturing image...\")\n    \n    ret, frame = cap.read()\n    if not ret:\n        raise Exception(\"Failed to capture image\")\n\n    _, buffer = cv2.imencode('.jpg', frame)\n    base64_image = base64.b64encode(buffer).decode('utf-8')\n    cap.release()\n    return base64_image\n\n\n\n# Function to ask for total weight\ndef get_total_weight():\n    while True:\n        total_weight = input(\"Enter the total weight (in grams): \")\n        if total_weight.isdigit():\n            return total_weight\n        else:\n            print(\"Please enter a valid number.\")\n\n# Function to save table data to a CSV file\ndef save_to_csv(meal_data):\n    csv_file_path = os.path.join(os.getcwd(), 'meal_data.csv')\n    file_exists = os.path.exists(csv_file_path)\n\n    with open(csv_file_path, 'a', newline='') as csvfile:\n        fieldnames = ['Meal', 'Calories', 'Macros', 'Ingredients', 'Weight']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        if not file_exists:\n            writer.writeheader()\n        writer.writerow(meal_data)\n\n    print(\"Data appended to CSV file successfully.\")\n\n# Function to parse JSON content and save to table\ndef save_to_csv(meal_data):\n    csv_file_path = os.path.join(os.getcwd(), 'meal_data.csv')\n    file_exists = os.path.exists(csv_file_path)\n\n    with open(csv_file_path, 'a', newline='') as csvfile:\n        fieldnames = ['Time', 'Meal', 'Dish', 'Calories', 'Macros', 'Ingredients', 'Weight']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        if not file_exists:\n            writer.writeheader()\n        \n        for meal_name, meal_content in meal_data['Meal'].items():\n            for dish_name, dish_info in meal_content.items():\n                if isinstance(dish_info, dict):\n                    writer.writerow({\n                        'Time': meal_data['Time'],\n                        'Meal': meal_name,\n                        'Dish': dish_name,\n                        'Calories': dish_info.get('Calories', ''),\n                        'Macros': dish_info.get('Macros (Protein/Carbs/Fats)', ''),\n                        'Ingredients': dish_info.get('Ingredients', ''),\n                        'Weight': dish_info.get('Weight', '')\n                    })\n                else:\n                    print(f\"Skipping dish '{dish_name}' in meal '{meal_name}' due to invalid format.\")\n\n    print(\"Data appended to CSV file successfully.\")\n\n# Function to make request to OpenAI API\ndef make_openai_request(base64_image, total_weight):\n    headers = {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": f\"Bearer {api_key}\"\n    }\n\n    payload = {\n      \"model\": \"gpt-4-vision-preview\",\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"You are a nutritionist and you always give accurate analyses of food items. Analyze the food in the picture. Calculate the calories, macros, ingredients, and weight for each dish. The total weight of the food is \" + total_weight + \" grams. Response in a pure JSON format: \\n\"\n                    \"{\\n\"\n                    \"    \\\"Time\\\": \\\"\\\",\\n\"\n                    \"    \\\"Meal\\\": {\\n\"\n                    \"        \\\"Dish1\\\": {\\n\"\n                    \"            \\\"Dishname\\\": \\\"\\\",\\n\"\n                    \"            \\\"Weight\\\": \\\"\\\",\\n\"\n                    \"            \\\"Calories\\\": \\\"\\\",\\n\"\n                    \"            \\\"Macros (Protein/Carbs/Fats)\\\": \\\"\\\",\\n\"\n                    \"            \\\"Ingredients\\\": \\\"\\\"\\n\"\n                    \"        }\\n\"\n                    \"        // More dishes can be added here\\n\"\n                    \"    }\\n\"\n                    \"}\\n\"\n                \"Ensure each dish has a unique index name and value of time is the timestamp user post the request. Standardize the response format as shown above, excluding any additional notes or explanations. If the analysis cannot be provided, refrain from responding.\"\n            },\n            {\n              \"type\": \"image_url\",\n              \"image_url\": {\n                \"url\": f\"data:image/jpeg;base64,{base64_image}\"\n              }\n            }\n          ]\n        }\n      ],\n      \"max_tokens\": 300\n    }\n\n    print(\"Making request to OpenAI API\")\n    response = requests.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers=headers,\n        json=payload\n    )\n\n    print(\"Getting response from OpenAI API\")\n    if response.status_code == 200:\n        print(\"Success\")\n        response_json = response.json()\n        content = response_json['choices'][0]['message']['content']\n        print(\"Response message:\")\n        print(content)\n        return content if content.strip() else None\n    else:\n        print('Failed to get response from OpenAI API')\n        return None\n\ndef extract_json_content(json_content_str):\n    # Find the first occurrence of \"```json\"\n    start_match = re.search(r'```json', json_content_str)\n    \n    # Find the last occurrence of \"```\"\n    end_match = re.search(r'```', json_content_str[::-1])\n    if end_match:\n        end_index = len(json_content_str) - end_match.start()\n    else:\n        end_index = None\n    \n    if start_match and end_index:\n        # Extract the substring between the first \"```json\" and the last \"```\"\n        json_content = json_content_str[start_match.end():end_index].strip()\n        return json_content\n    else:\n        return None\n\ndef save_to_json(json_content_str):\n    if not os.path.exists('meal_data.json'):\n        with open('meal_data.json', 'w') as json_file:\n            json_file.write('[\\n')\n            json_file.write(json_content_str + '\\n')\n            json_file.write(']\\n')\n    else:\n        try:\n            with open('meal_data.json', 'r+') as json_file:\n                content = json_file.read()\n                json_file.seek(0)\n                json_file.write(content[:-2])  # Remove the last comma and newline\n                json_file.write(',\\n')\n                json_file.write(json_content_str + '\\n')\n                json_file.write(']\\n')\n        except Exception as e:\n            print(f\"Error saving JSON to file: {e}\")\n\n\n# Main function\ndef main():\n    total_weight = get_total_weight()\n    base64_image = capture_and_encode_image()\n    json_content = make_openai_request(base64_image, total_weight)\n    print(\"json_content\", json_content)\n    json_content_str = extract_json_content(json_content)\n    print(\"json_content_str\", json_content_str)\n\n    # json_content_str = '''```json\n    #     {\n    #         \"Dish1\": {\n    #             \"Dishname\": \"Kung Pao Chicken\",\n    #             \"Weight\": \"100g\",\n    #             \"Calories\": \"179\",\n    #             \"Macros (Protein/Carbs/Fats)\": \"14g/11g/9g\",\n    #             \"Ingredients\": \"Chicken, peanuts, vegetables (bell peppers, zucchini, onions), Szechuan peppers, soy sauce, garlic, ginger, sugar, sesame oil, chili peppers\",\n    #             \"Timestamp\": \"2023-04-12T14:32:12Z\"\n    #         }\n    #     },\n    #     ```\n    #     ```json\n    #     {\n    #         \"Dish1\": {\n    #             \"Dishname\": \"Kung Pao Chicken\",\n    #             \"Weight\": \"100g\",\n    #             \"Calories\": \"179\",\n    #             \"Macros (Protein/Carbs/Fats)\": \"14g/11g/9g\",\n    #             \"Ingredients\": \"Chicken, peanuts, vegetables (bell peppers, zucchini, onions), Szechuan peppers, soy sauce, garlic, ginger, sugar, sesame oil, chili peppers\",\n    #             \"Timestamp\": \"2023-04-12T14:32:12Z\"\n    #         }\n    #     }\n    #     ```'''\n    if json_content_str:\n        print(\"Saving JSON to file\")\n        save_to_json(json_content_str.replace('```json\\n', '').replace('```\\n', '').replace('```', ''))\n\n\n    # if json_content_str:\n    #     print(\"Loading the JSON content string\")\n    #     json_content = json.loads(json_content_str)\n    #     print(\"Saving JSON to CSV\")\n    #     save_to_csv(json_content)\n\nif __name__ == \"__main__\":\n    main()\n"
        }
    ]
}